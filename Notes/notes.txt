1) time complexity 
2) space complexity


x=10

int k=10
int k1=10
int k2=10

20 byte * 100000 -> 20,00,000 byte 
    -> 2000 MB
    -> 2 GB 

                    ----------------------------------------------------------------------
                    |                            Types of DS                             |
                    ----------------------------------------------------------------------

                                            Data Structure
                                                |
            ---------------------------------------------------------------------------
            |                                                                         |
        primitive                                                                  Non-primitive 
        Data Structure                                                             Data Structure       
            |                                                                         |
    -----------------                                                 -----------------------------------            
    |       |       |                                                 |                                 |
Integer  Float    Character                                         Linear                           Non-Linear
                                                                Data Structure                      Data Structure
                                                                      |                             → Tree
                                                                -------------                       → Graph
                                                                |           | 
                                                            Static       Dynamic
                                                            → Array      → Stack
                                                                         → Queue
                                                                         → LinkedList

        DS                                                               
Linear 			NonLinear
Array 			Tree
Stack 			Graph 
Queue 
LinkedList
 
	Sort :-binary, selection, insertion, merge, quick, heap  
	
    Search:-linear,binary 





array : sum 

SIZE = 50 -> 25 
100 -> 50 

n/2 
 
 O(n/2)


 O(1) : constant 





search 

1...50 

25 



login facebook -> 
    
------------------------------------------------------------------------------    

array -> n number items 
		 static 
		 
int a[5]; //4*5=>20

DMA 

10 -> 
3->2 


0:2000 2001 2002 2003
1:2004
2:2008
3:2012
4:2016 
----------------------------------------------------

function 

void add(){
	scanf -> console
	printf(10); 
}

add(); // call 


int add(){

	return 10; 
}

ans = add(); 


int add(int x,int y){
	return x+y; 
}

add(10,20);
-----------------------------------------------------


STACK -> LiFo -> Last In First Out 

ticket -> 

ctrl+z -> stack 


  
display 
40
30
30
10

=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-
|											24-ds-9pm											|
=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-

C , C++ , Java , Python 

DS 


10
30
------

40

5 line code->5 instruction -> 2 second -> 5MB 

1000 users -> 

5000 instructions -> 5MB*1000 : 5000MB 


DS
    1) time complexity 
         time taken : 
                    total instructions executed 
    2) space complexity :
                    total memory 



int main(){

    for(i=1;i<=5;i++){
        printf("Hi ");
        //
        //
    }

}


ALGO :-  


                                        DS 
            Linear DS                                               Non Linear DS 
    Array                                                               Tree
    Stack                                                               Graph 
    Queue 
    LinkedList                   


    searching 
        1) linear 
        2) binary
    sorting
        1) bubble  
        2) selection
        3) insertion 
        4) merge sort
        5) quick sort 
        6) heap sort 

------------------------------------------------------------------------------------


time complexity***
space complexity 

10 second -> 5 second 



resources -> 

---------------------------------------------------------------------------

8 numbers-> 
10  15  2   20  25  63  22  14


10 numbers-> 
10  15  2   20  25  63  22  14  50 70 
start 

search : 10 :  1 
search : 2  :  3 
search : 25 :  5 
search : 100 : 10  {n time} {size}



Notation :- Symbol :- 



1) worst case***  : Big O notation 
2) best case      : Big Omega notation
3) avg case       : Big Theta notation


------------------------------------------------------------------
array 

function 

struct 
-------------------------------------------------------------------

array -> 

    what is an array  ? 
        array is collection of same type of data 
        under the one data name we can store n numbers of items 
        continueous manner 
        you can access elements of the array using index 
        index will start from 0 and ends with SIZE-1 

    int a; //i can store a single value 
    a = 10; 



    a = 100; //10 over write
    printf(" %d",a); //100           


    int a[10];

    //a[0]  a[1] a[2] ..... a[9]

    //0 1 2 3 4 5 ------ 9 ==> index 
    //index is alos known as --> subscript 

    [] => 1 dimension -> single line-> 
    [][] => 2 dimension -> matrix 
    [][][] => multidimension -> 3D 


------------------------------------------------------------------------------------



function -> 



        max function find out the max value from a and b 
        a and b is the parameter of the max function. 
        max function will print who is max from a and b. 


        

--------------------------------------------------------------------------


stack 
    LiFo -> Last In First Out 


    1)whatsapp -> chat -> msg 

    T 11 -> hi 

    D 11.15 -> hi 

    D T 

    2) email 

    3) call-history   

    4) stack of plate 

    5) gallery 

--------------------------------------------------------------------------------


add:10
add:20
add:30

display
30
20
10

add:40
40
30
20
10


array*** 

--------------
_push()_____ function is used to add data in stack?

_pop()_____ function is used to remove data 
from stack? 


___top___ pointer/indicator we will use to manage stack?
   

______ condition is used to identify that 
stack is full? 
top == size-1 



_top == -1______ condition is used to identify that 
stack is EMPTY?


in which operation we will do top++? 
PUSH(10)

----------------------------------------------
StackCharRev.c 

take a string from user and reverse it. 


royal 

PUSH('r')
PUSH('o')
PUSH('y')
PUSH('a')
PUSH('l')

display() -> layor 

---------------------------------------------------
1)Linear Search 
2)binary Search 

search : Linear 

array : [10,20,30,40,50,60,70,80,90,100]   

SIZE : 10 


enter search num: 
11 
Not Found 


enter search num: 
70 
Found 

time complexity ->10 array -> 10 time
                  15 array -> 15 time 
                  25 array -> 25 time 
                    
                    N : N 
O(n) 
----------------------------------------------------------------
binary search 

array : [10,20,30,40,50,60,70,80,90,100]

array must be sorted : 
----------------------------------------------------------------

bubble sort 
selection sort 
insertion sort 
merge sort 
quick sort
heap sort  

---------------------------------------------------------------
linear search : O(n) 
binary search : log(n)

stack : PUSH top++  O(1) constant 
        POP  top--  O(1)

-----------------------------------------------------------------

SORTING :- 

array : 55 87 65 43 45 67 89 76 54 33 45 67
    sorting
ASC smaller to larger 
DSC larger to smaller 

bubble sort -> 

-----------------------------------------------------------------

SORTING :- 

array : 55 87 65 43 45 67 89 76 54 33 45 67
    sorting
ASC smaller to larger 
DSC larger to smaller 

bubble sort -> 




selection sort -> 

array : 55 87 65 43 45 67 89  
        i  j 
        min 
            min 
43  45  55  65  87  67  89 
            i   j



selection 
bubble 

insertion sort -> 


array : 55 87 65 43 45 67 89  
    

direction -> left to right 
             right to left -> current element -> small -> stop 
                                              -> big -> +1 index shift -> overwrite 


55 87 65 43 45 67 89 



 current = 89


43 45 55 65 67 87 89


----------------------------------
85 47 62 14 3 25  19  9 55 
-----------------------------------


current=47 
47 85 62 14 3 25  19  9 55 
    

current=62 
47 62 85 14 3 25  19  9 55 
      j  i

current=14 
14 47 62 85 3 25  19  9 55 

current=3 
3 14 47 62 85 25  19  9 55 

current=25
3 14 25 47 62 85  19  9 55 



current=19************
3 14 25 47 62 85  19  9 55 



-----------------------------------------------------


j
   43 55 65 87 45 67 89 
         i 
   current=43 
   j=i-1 

    if a[j] > current:
        a[j+1] = a[j]

    else 
        break 

    a[j+1] = current    

i++ 

-----------------------------------------------

recursion => 



    print(5) 
    5 4 3 2 1 

    print(3)
    3 2 1 

    print(5)
    1 2 3 4 5 


=-----------------------------------------------------------------------------

two num addition -> 2 variable 

10 number addition -> array 
    collection n numbers of item with same type of data 


Amazon-> 
    productName ->char[]
    price  -> int 
    productId -> int 
    qty -> int 
    category -> char[] 
    structure => collection of n numbres of items with different type of data 


struct product{
    char productName[20];
    char category[20];
    int productId;
    int qty;
    int price; 
};

struct product p1;  


    0. Exit 
    1. Add Product 
    2. List All Products 
    3. Search Product By Category {linear search} 
    4. Search Product By Id       {binary searc }
    
    MAX 10 Products 

    add product 
    how many products you want to enter 
    3



---------------------------------------------------------------------------------------
array -> random -> index

stack -> LiFo -> Last in First Out 
        1) gallery
        2) whatsapp msg 
        3) history 

Queue -> FiFo -> First In First Out 
        1) printer print 
        2) checkout 

        Type :
            1) simple queue 
            2) circular queue 
            


0   1   2   3   4   
        30  40  50
        f       r

empty -> 0 

empty -> 2 
----------------------------------------------------------------------------


DMA -> dynamic memory allocation


int a; //4 byte 

int x[5]; // array -> 20 byte 



int main(){

    int x; //4 byte 
    int num[5]; // 20 byte 



    //4 byte -> not required 
    //nun -> X 





    //
    return 0; 
}//finish 





int main(){

    int num[5]; // 20 byte -> 5 elements 

    7 elements ? -> overflow  

}



int main(){

    int num[5]; // 20 byte -> 5 elements 

    2 elements ! --> 3 -> no 
 
}

SMA -> declare -> memory allocated -> 
    SMA -> release -> scope -> function(){}
    SMA -> fix size -> grow , shrink


DMA -> 

--------------------------------------------------------------------------------------

memory allocation ->
                    calloc() 
                    malloc() 

memory release  -> free()

resize -> realloc()

header? 
        stdlib.h 
---------------------------------------------------------------------------------        

calloc -> same size block multiple qty 
malloc -> block  

int a[5]; // calloc 


int a; // malloc 

***********

malloc -> heap -> virtual address -> faster 
calloc -> page -> physical address 



m:memory allocation
c: contiguous  
***********





int *p; 

p = malloc(sizeof(int)); 
    //TC GCC {old}
p = (int*)malloc(sizeof(int)); 


char *c;
c = (char*)malloc(sizeof(char)); 

float *t;
t = (float*)malloc(sizeof(float)); 




why  ? 

    malloc() return type ?
    int , char , float ,double ? 

    generic pointer -> void pointer -> 
    void* 

------------------------------------------------------------------------

ask size of an array from user -> scan data in array -> 
    1)find out max from an array
    2)find out sum of all elements in an array

-------------------------------------------------------------------------


struct -> 


-------------------------------------------------------------------------


DMA 
    calloc 
    malloc 

    free 

    realloc -> resize +  -  

    stdlib.h 

---------------------------------------------------------------------------------



Linear DS -> LinkedList -> dynamic list -> {} 

        n number of items 
        dynamic memory allocation 


        when you want you allocate memory and use it 
        when you dont want just release it 


        20 30 40 50 -> allocation 

        display -> 20 30 40 50 


----------------------------------------------------------------------------------



